import matplotlib.pyplot as plt     # All the necessary modules, some are dehighlighted in VS Code but they will be used. 
import numpy as np
import sympy as sp
from numpy import *
from sympy import *
import re  
import time
import random
from tkinter import *
from threading import *
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from playsound import playsound
import os

top=None



class Seed:   # Randomly generate blank graph.
    def __init__(self,domain_lower,domain_upper,range_lower,range_upper):
        self.domain_lower=domain_lower
        self.domain_upper=domain_upper
        self.range_lower=range_lower
        self.range_upper=range_upper

S1=Seed(round(random.randint(-200,-10),-1),round(random.randint(10,200),-1),None,None)     # Generate seed 1.
S1.range_lower=S1.domain_lower;S1.range_upper=S1.domain_upper
print(S1.domain_lower,S1.domain_upper)







def music():
    while True:
        playsound(os.getcwd()+'/Sounds/Josad ost.mp3')



def graph_function(): 
    global fig,top

    x = np.linspace(S1.domain_lower, S1.domain_upper, 300)     # Domain.
    fig, ax = plt.subplots(figsize=(10, 10))     # X by Y graph size.

    if 'x' not in user_function:     # Check if 'x' is in the user's function.
        y = [float(user_function) for _ in x]     # Create a constant function.
    else:
        y = eval(user_function)

    plt.xlim(S1.domain_lower, S1.domain_upper)     # Domain and range of graph.
    plt.ylim(S1.range_lower,S1.range_upper)
    ax.plot(x, y)
    ax.set_aspect(aspect=1)     # Aspect ratio, larger number -> longer y axis.

    ax.grid(True, which='both')

    
    ax.spines['left'].set_position('zero')     # Set the ticks for x and y axis.
    ax.spines['right'].set_color('none')
    ax.yaxis.tick_left()
    ax.spines['bottom'].set_position('zero')
    ax.spines['top'].set_color('none')
    ax.xaxis.tick_bottom()
    

    
    plt.title('f(x) = '+str(original_entry))     # Add title and labels.
    ax.set_xlabel('x', loc='right')
    ax.set_ylabel('y', loc='top')
    

    
    if top:     # Update toplevel window if it exists.
        top.destroy()
        top.update()
    top = Toplevel()     # Create toplevel window.
    top.title("Graph")
    top.geometry("800x800+0+0")  # Set the position of the window.
    top.resizable(0,0)

    
    canvas = FigureCanvasTkAgg(fig, master=top)    # Create a canvas and add the plot to it.
    canvas.draw()
    canvas.get_tk_widget().pack(side=TOP, fill=BOTH, expand=1)
def error_check():
    global user_function,ax,x,y,error_label,original_entry

   
    user_function = function_entry.get()      # Get user input as a function expression.
    original_entry = function_entry.get()     # Get a copy of the user's original input. 

    try:
       
        if not user_function:      # If the user didn't input anything, plot nothing.
            user_function=str(9999)
       
        user_function = re.sub(r'(\d+)([a-zA-Z_]+)', r'\1*\2', user_function)      # Substitute multiplication with * symbols for use in numpy.
        
        user_function=(
           user_function     # Make notation substitutions for use in numpy.
                .replace("^","**")
                .replace("sin","np.sin")     # Trig functions.
                .replace("cos","np.cos")
                .replace("tan","np.tan")
                .replace("sec","np.sec")
                .replace("csc","np.csc")
                .replace("cot","np.cot")
                .replace("sqrt","np.sqrt")
                .replace("pi", str(np.pi))     # Constants.
                .replace("e", str(np.e))
       )

        print(user_function)
        

        x = np.linspace(0,0,0)     # Test to see if user function is plottable for error checking before actually graphing it. 
        if 'x' not in user_function:     
            y = [float(user_function) for _ in x]     
        else:
            y = eval(user_function)


        error_label.config(text="")     # Clear error label, no error present. 

        return graph_function()     # Graph the function.

    except Exception:

        if user_function.count("(") != user_function.count(")"):
            error_label.config(text="Check all brackets have been closed.")     # Inform user their brackets have not been closed. 
        else:
            error_label.config(text="Unrecognized function, check notation.")     # Inform user they have not inputted a valid function.



def main():

    global function_entry,error_label,user_function,original_entry,top

    Thread(target=music).start()
    

    function_label=Label(root,text='f(x)=')
    function_label.place(x=0,y=0)

    function_entry=Entry(root,width=20)
    function_entry.place(x=30,y=0)

    graph_button=Button(root,text='Graph',command=error_check)
    graph_button.place(x=165,y=0)

    error_label=Label(root,text="",fg="red") 
    error_label.place(x=220,y=0)

    user_function=str(9999)
    original_entry=""
    graph_function()

    root.title("Input a function")
    root.geometry("800x100+0+836")
    root.resizable(0,0)
    root.mainloop()


root = Tk()
main()
